/// <reference lib="webworker" />
declare const self: ServiceWorkerGlobalScope;

import {build, files, version} from "$service-worker";
// build = files generated by Vite
// files = files in the `static` directory

const toCache = build.concat(files);
const cached = new Set(toCache);

const PRECACHE = `precache-${version}`;
const RUNTIME = "runtime";
const currentCaches = [PRECACHE, RUNTIME];

self.addEventListener("install", (evt) => {
	// Create a new cache and add all files in `toCache` to the cache
	evt.waitUntil(
		caches.open(PRECACHE).then(async (cache) => {
			await cache.addAll(toCache);
			await self.skipWaiting();
		}),
	);
});

// Runs after the install event
self.addEventListener("activate", (evt) => {
	// Clean up old caches
	evt.waitUntil(
		caches.keys().then(async (cacheNames) => {
			for (const cacheName of cacheNames) {
				if (!currentCaches.includes(cacheName)) {
					await caches.delete(cacheName);
				}
			}
			await self.clients.claim();
		}),
	);
});

self.addEventListener("fetch", (evt) => {
	const url = new URL(evt.request.url);

	// Always serve bundler-generated and static files from the cache
	if (url.host === self.location.host && cached.has(url.pathname)) {
		evt.respondWith(
			caches.match(evt.request).then(async (cachedResponse) => {
				if (cachedResponse) {
					return cachedResponse;
				}
				// Handle case where the file isn't in the cache
				const cache = await caches.open(PRECACHE);
				const networkResponse = await fetch(evt.request);
				await cache.put(evt.request, networkResponse.clone());
				return networkResponse;
			}),
		);
		return;
	}

	if (evt.request.cache === "only-if-cached") {
		return;
	}

	// Try the network first, falling back to the cache if the user is offline
	evt.respondWith(
		caches.open(RUNTIME).then(async (cache) => {
			try {
				const networkResponse = await fetch(evt.request);
				await cache.put(evt.request, networkResponse.clone());
				return networkResponse;
			} catch (err) {
				const cachedResponse = await cache.match(evt.request);
				if (cachedResponse) {
					return cachedResponse;
				}
				throw err;
			}
		}),
	);
});
